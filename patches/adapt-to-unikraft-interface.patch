From: Hugo Lefeuvre <hugo.lefeuvre@neclab.eu>
Subject: Adapt Mimalloc interface to Unikraft
 - expose mi_process_load() since it is called in the glue code
 - remove useless ATOMIC_VAR_INIT calls since they cause problems with newlib
 - request memory from the OS via mi_unikraft_heap_grow(), which relies
   internally on uk_mimalloc_region_malloc(), our underlying region manager
 - at the time where Mimalloc was ported, the support for memory protections
   by Unikraft was unclear, so it is here disabled. A future update of this
   port should address this.
diff -urNp mimalloc-orig/include/mimalloc.h mimalloc-patched/include/mimalloc.h
--- mimalloc-orig/include/mimalloc.h	2020-02-17 19:10:22.000000000 +0100
+++ mimalloc-patched/include/mimalloc.h	2020-06-24 10:16:31.439830260 +0200
@@ -144,6 +144,7 @@ mi_decl_export void mi_stats_print(void*
 mi_decl_export void mi_stats_print_out(mi_output_fun* out, void* arg) mi_attr_noexcept;
 
 mi_decl_export void mi_process_init(void)     mi_attr_noexcept;
+mi_decl_export void mi_process_load(void)     mi_attr_noexcept;
 mi_decl_export void mi_thread_init(void)      mi_attr_noexcept;
 mi_decl_export void mi_thread_done(void)      mi_attr_noexcept;
 mi_decl_export void mi_thread_stats_print_out(mi_output_fun* out, void* arg) mi_attr_noexcept;
diff -urNp mimalloc-orig/src/init.c mimalloc-patched/src/init.c
--- mimalloc-orig/src/init.c	2020-02-17 19:10:22.000000000 +0100
+++ mimalloc-patched/src/init.c	2020-06-24 10:16:31.443830218 +0200
@@ -25,8 +25,8 @@ const mi_page_t _mi_page_empty = {
   0,       // used
   0,       // xblock_size
   NULL,    // local_free
-  ATOMIC_VAR_INIT(0), // xthread_free
-  ATOMIC_VAR_INIT(0), // xheap
+  0, // xthread_free
+  0, // xheap
   NULL, NULL
 };
 
@@ -91,7 +91,7 @@ const mi_heap_t _mi_heap_empty = {
   NULL,
   MI_SMALL_PAGES_EMPTY,
   MI_PAGE_QUEUES_EMPTY,
-  ATOMIC_VAR_INIT(NULL),
+  NULL,
   0,                // tid
   0,                // cookie
   { 0, 0 },         // keys
@@ -125,7 +125,7 @@ mi_heap_t _mi_heap_main = {
   &tld_main,
   MI_SMALL_PAGES_EMPTY,
   MI_PAGE_QUEUES_EMPTY,
-  ATOMIC_VAR_INIT(NULL),
+  NULL,
   0,                // thread id
   0,                // initial cookie
   { 0, 0 },         // the key of the main heap can be fixed (unlike page keys that need to be secure!)
@@ -430,7 +430,7 @@ static void mi_allocator_done() {
 #endif
 
 // Called once by the process loader
-static void mi_process_load(void) {
+void mi_process_load(void) {
   mi_heap_main_init();
   #if defined(MI_TLS_RECURSE_GUARD)
   volatile mi_heap_t* dummy = _mi_heap_default; // access TLS to allocate it before setting tls_initialized to true;
@@ -438,7 +438,9 @@ static void mi_process_load(void) {
   #endif
   os_preloading = false;
   atexit(&mi_process_done);
-  _mi_options_init();
+  // delay _mi_options_init() after initialization as it allocates a lot of
+  // memory and we want to avoid doing that with the early boot time allocator
+  //_mi_options_init();
   mi_process_init();
   //mi_stats_reset();-
   if (mi_redirected) _mi_verbose_message("malloc is redirected.\n");
@@ -519,6 +521,8 @@ static void mi_process_done(void) {
   }
   static bool mi_initialized = _mi_process_init();
 
+#elif defined(CONFIG_LIBMIMALLOC)
+  // called by uk_init_mimalloc()
 #elif defined(__GNUC__) || defined(__clang__)
   // GCC,Clang: use the constructor attribute
   static void __attribute__((constructor)) _mi_process_init(void) {
diff -urNp mimalloc-orig/src/os.c mimalloc-patched/src/os.c
--- mimalloc-orig/src/os.c	2020-02-17 19:10:22.000000000 +0100
+++ mimalloc-patched/src/os.c	2020-06-24 14:44:56.745158608 +0200
@@ -14,11 +14,14 @@ terms of the MIT license. A copy of the
 
 #include <string.h>  // strerror
 
+#include <uk/mimalloc_impl.h> // uk_mimalloc_region_malloc
 
 #if defined(_WIN32)
 #include <windows.h>
 #elif defined(__wasi__)
 // stdlib.h is all we need, and has already been included in mimalloc.h
+#elif defined(CONFIG_LIBMIMALLOC)
+#include <unistd.h>    // sysconf
 #else
 #include <sys/mman.h>  // mmap
 #include <unistd.h>    // sysconf
@@ -184,8 +187,8 @@ static bool mi_os_mem_free(void* addr, s
   bool err = false;
 #if defined(_WIN32)
   err = (VirtualFree(addr, 0, MEM_RELEASE) == 0);
-#elif defined(__wasi__)
-  err = 0; // WebAssembly's heap cannot be shrunk
+#elif defined(__wasi__) || defined(CONFIG_LIBMIMALLOC)
+  err = 0; // WebAssembly's/Unikraft's heap cannot be shrunk
 #else
   err = (munmap(addr, size) == -1);
 #endif
@@ -272,6 +275,10 @@ static void* mi_wasm_heap_grow(size_t si
   }
   return (void*)aligned_base;
 }
+#elif defined(CONFIG_LIBMIMALLOC)
+static void* mi_unikraft_heap_grow(size_t size, size_t try_alignment) {
+  return uk_mimalloc_region_malloc(NULL, size);
+}
 #else
 #define MI_OS_USE_MMAP
 static void* mi_unix_mmapx(void* addr, size_t size, size_t try_alignment, int protect_flags, int flags, int fd) {
@@ -450,6 +457,9 @@ static void* mi_os_mem_alloc(size_t size
   #elif defined(__wasi__)
     *is_large = false;
     p = mi_wasm_heap_grow(size, try_alignment);
+  #elif defined(CONFIG_LIBMIMALLOC)
+    *is_large = false;
+    p = mi_unikraft_heap_grow(size, try_alignment);
   #else
     int protect_flags = (commit ? (PROT_WRITE | PROT_READ) : PROT_NONE);
     p = mi_unix_mmap(NULL, size, try_alignment, protect_flags, false, allow_large, is_large);
@@ -638,8 +648,8 @@ static bool mi_os_commitx(void* addr, si
     BOOL ok = VirtualFree(start, csize, MEM_DECOMMIT);
     err = (ok ? 0 : GetLastError());
   }
-  #elif defined(__wasi__)
-  // WebAssembly guests can't control memory protection
+  #elif defined(__wasi__) || defined(CONFIG_LIBMIMALLOC)
+  // Unikraft/WebAssembly guests can't control memory protection
   #elif defined(MAP_FIXED)
   if (!commit) {
     // use mmap with MAP_FIXED to discard the existing memory (and reduce commit charge)
@@ -714,7 +724,7 @@ static bool mi_os_resetx(void* addr, siz
     advice = MADV_DONTNEED;
     err = madvise(start, csize, advice);
   }
-#elif defined(__wasi__)
+#elif defined(__wasi__) || defined(CONFIG_LIBMIMALLOC)
   int err = 0;
 #else
   int err = madvise(start, csize, MADV_DONTNEED);
@@ -768,7 +778,7 @@ static  bool mi_os_protectx(void* addr,
   DWORD oldprotect = 0;
   BOOL ok = VirtualProtect(start, csize, protect ? PAGE_NOACCESS : PAGE_READWRITE, &oldprotect);
   err = (ok ? 0 : GetLastError());
-#elif defined(__wasi__)
+#elif defined(__wasi__) || defined(CONFIG_LIBMIMALLOC)
   err = 0;
 #else
   err = mprotect(start, csize, protect ? PROT_NONE : (PROT_READ | PROT_WRITE));
